# https://www.reddit.com/r/learnpython/comments/1iw2c1/tutorial_massive_what_is_a_class_explain_object/
# https://www.reddit.com/r/learnpython/comments/9uo346/good_tutorial_for_chess/


class Board(object):

    def __init__(self):
        self.moves = []
        self.flipped = False
        self.whitesTurn = True
        
        self.squares = []
        for temp in range(8): #there are 8 rows on a board
            for temp2 in range(8): #there are 8 columns on a board
                self.squares.append(square(temp, temp2)) #add a square where row=temp1, column=temp2

        self.standard()
		
    def standard(self):
        #function to setup the board with the "standard"
        #configuration of pieces
		
        #go through every square we have
        for sq in self.squares:
			
            #set black pawns down
            if sq.row == 1:
                sq.set_piece("Black", "Pawn")
			
            #set white pawns down
            if sq.row == 6:
                sq.set_piece("White", "Pawn")
			
            #set pieces down
            if sq.row == 0 or sq.row == 7:
				
                if sq.row == 0: 
                    col = "White"
                if sq.row == 7: 
                    col = "Black"
				
                if sq.column == 0 or sq.column == 7:
                    sq.set_piece(col, "Rook")
                if sq.column == 1 or sq.column == 6:
                    sq.set_piece(col, "Knight")
                if sq.column == 2 or sq.column == 5:
                    sq.set_piece(col, "Bishop")
                if sq.column == 3:
                    sq.set_piece(col, "Queen")
                if sq.column == 4:
                    sq.set_piece(col, "King")

            if sq.row == 2 or sq.row == 3 or sq.row == 4 or sq.row == 5:
                sq.set_piece(None, None)

    def get_piece(self, row, column):
        for sq in self.squares:
            if sq.row == row and sq.column == column:
                return sq.piece
				
            
class Square(object):

    def __init__(self, row, column):
        self.row = row
        self.column = column
        self.piece = None
    
    def set_piece(self, color, type):
        self.piece = piece(color, type)
    
    def empty_square(self):
        self.piece = piece(None, None)

class Piece(object):
    
    def __init__(self, color, type):
        self.color = color
        self.type = type
